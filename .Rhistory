library(tidyverse)
library(here)
library(haven)
library(patchwork)
setwd(here("C:/University/ELTE/PhD/Okulás/1st semester/Statisztikai programozás/elte-ppk-r-course-Fall-2025"))
getwd()
data_a <- read_sav("data/assignment_4_dataset_A.sav")
data_b <- read_sav("data/assignment_4_dataset_B.sav")
data_a_clean = data_a |>
rename(stai = STAI_trait) |>
mutate(ID = as.integer(str_remove(ID, "ID_")),
hospital = as.factor(str_remove(hospital, "hospital_")),
sex = str_to_lower(sex))
is.integer(data_a_clean$ID)
is.factor(data_a_clean$hospital)
variables = c("pain", "age", "weight", "stai", "pain_cat", "mindfulness", "cortisol_serum", "cortisol_saliva", "IQ", "household_income")
# Distribution of each variable
distribution = function(variables){
var = sym(variables)
data_a_clean |>
ggplot(aes(x = !!var)) +
geom_histogram() +
xlim(0, NA) +
ylim(0, NA)
}
for (i in variables){
assign(paste0(i, "_distribution"), distribution(i))
}
# Plot all distributions together
pain_distribution + age_distribution + weight_distribution + stai_distribution + pain_cat_distribution + mindfulness_distribution + cortisol_serum_distribution + cortisol_saliva_distribution + IQ_distribution + household_income_distribution + plot_layout(ncol = 3)
# Summary statistics of each variable
summary_stats <- data.frame()
for (s in variables) {
scores <- data_a_clean[[s]]
mean_val <- mean(scores, na.rm = TRUE)
median_val = median(scores, na.rm = TRUE)
sd_val <- sd(scores, na.rm = TRUE)
se_val <- sd_val / sqrt(sum(!is.na(scores)))
shapiro <- tryCatch({
shapiro.test(scores)$p.value
}, error = function(e) NA)
non_normal = ifelse(shapiro < 0.05, TRUE, FALSE)
summary_stats <- rbind(summary_stats, data.frame(
variables = s,
mean = mean_val,
median = median_val,
sd = sd_val,
se = se_val,
shapiro = shapiro,
non_normal = non_normal
))
}
# Show summary statistics
View(summary_stats)
for (s in variables) {
scores <- data_a_clean[[s]]
mean_val <- mean(scores, na.rm = TRUE)
median_val = median(scores, na.rm = TRUE)
sd_val <- sd(scores, na.rm = TRUE)
se_val <- sd_val / sqrt(sum(!is.na(scores)))
shapiro <- tryCatch({
shapiro.test(scores)$p.value
}, error = function(e) NA)
normal = ifelse(shapiro < 0.05, FALSE, TRUE)
summary_stats <- rbind(summary_stats, data.frame(
variables = s,
mean = mean_val,
median = median_val,
sd = sd_val,
se = se_val,
shapiro = shapiro,
normal = normal
))
}
distribution = function(variables){
var = sym(variables)
data_a_clean |>
ggplot(aes(x = !!var)) +
geom_histogram() +
xlim(0, NA) +
ylim(0, NA)
}
for (i in variables){
assign(paste0(i, "_distribution"), distribution(i))
}
# Plot all distributions together
pain_distribution + age_distribution + weight_distribution + stai_distribution + pain_cat_distribution + mindfulness_distribution + cortisol_serum_distribution + cortisol_saliva_distribution + IQ_distribution + household_income_distribution + plot_layout(ncol = 3)
# Summary statistics of each variable
summary_stats <- data.frame()
for (s in variables) {
scores <- data_a_clean[[s]]
mean_val <- mean(scores, na.rm = TRUE)
median_val = median(scores, na.rm = TRUE)
sd_val <- sd(scores, na.rm = TRUE)
se_val <- sd_val / sqrt(sum(!is.na(scores)))
shapiro <- tryCatch({
shapiro.test(scores)$p.value
}, error = function(e) NA)
normal = ifelse(shapiro < 0.05, FALSE, TRUE)
summary_stats <- rbind(summary_stats, data.frame(
variables = s,
mean = mean_val,
median = median_val,
sd = sd_val,
se = se_val,
shapiro = shapiro,
normal = normal
))
}
# Show summary statistics
View(summary_stats)
summary(data_a)
pain_distribution + age_distribution + weight_distribution + stai_distribution + pain_cat_distribution + mindfulness_distribution + cortisol_serum_distribution + cortisol_saliva_distribution + IQ_distribution + household_income_distribution + plot_layout(ncol = 3)
variables = c("pain", "age", "weight", "stai", "pain_cat", "mindfulness", "cortisol_serum", "cortisol_saliva", "IQ", "household_income")
# Distribution of each variable
distribution = function(variables){
var = sym(variables)
data_a_clean |>
ggplot(aes(x = !!var)) +
geom_histogram() +
xlim(0, NA) +
ylim(0, NA)
}
for (i in variables){
assign(paste0(i, "_distribution"), distribution(i))
}
# Plot all distributions together
pain_distribution + age_distribution + weight_distribution + stai_distribution + pain_cat_distribution + mindfulness_distribution + cortisol_serum_distribution + cortisol_saliva_distribution + IQ_distribution + household_income_distribution + plot_layout(ncol = 3)
all_distributions = pain_distribution + age_distribution + weight_distribution + stai_distribution + pain_cat_distribution + mindfulness_distribution + cortisol_serum_distribution + cortisol_saliva_distribution + IQ_distribution + household_income_distribution + plot_layout(ncol = 3)
# Save plot
ggsave(all_distributions, "all_distributions.png")
# Save plot
ggsave("all_distributions.png")
distribution = function(variables){
var = sym(variables)
data_a_clean |>
ggplot(aes(x = !!var)) +
geom_histogram() +
xlim(0, NA) +
ylim(0, NA) +
theme_minimal()
}
for (i in variables){
assign(paste0(i, "_distribution"), distribution(i))
}
# Plot all distributions together
all_distributions = pain_distribution + age_distribution + weight_distribution + stai_distribution + pain_cat_distribution + mindfulness_distribution + cortisol_serum_distribution + cortisol_saliva_distribution + IQ_distribution + household_income_distribution + plot_layout(ncol = 3)
all_distributions
pain_distribution + age_distribution + weight_distribution + stai_distribution + pain_cat_distribution + mindfulness_distribution + cortisol_serum_distribution + cortisol_saliva_distribution + IQ_distribution + household_income_distribution + plot_layout(ncol = 3, axes = "collect")
pain_distribution + age_distribution + weight_distribution + stai_distribution + pain_cat_distribution + mindfulness_distribution + cortisol_serum_distribution + cortisol_saliva_distribution + IQ_distribution + household_income_distribution + plot_layout(ncol = 3, axes = "collect_X")
# Plot all distributions together
all_distributions = pain_distribution + age_distribution + weight_distribution + stai_distribution + pain_cat_distribution + mindfulness_distribution + cortisol_serum_distribution + cortisol_saliva_distribution + IQ_distribution + household_income_distribution + plot_layout(ncol = 3, axes = "collect_x")
all_distributions
pain_distribution + age_distribution + weight_distribution + stai_distribution + pain_cat_distribution + mindfulness_distribution + cortisol_serum_distribution + cortisol_saliva_distribution + IQ_distribution + household_income_distribution + plot_layout(ncol = 3, axes = "collect_y")
pain_distribution + age_distribution + weight_distribution + stai_distribution + pain_cat_distribution + mindfulness_distribution + cortisol_serum_distribution + cortisol_saliva_distribution + IQ_distribution + household_income_distribution + plot_layout(ncol = 3, axis_titles = "collect_y")
all_distributions = age_distribution + weight_distribution + IQ_distribution + household_income_distribution + pain_distribution + pain_cat_distribution + stai_distribution + mindfulness_distribution + cortisol_serum_distribution + cortisol_saliva_distribution + plot_layout(ncol = 3, axis_titles = "collect_y")
all_distributions
distribution = function(variables){
var = sym(variables)
data_a_clean |>
ggplot(aes(x = !!var)) +
geom_histogram() +
xlim(0, NA) +
#ylim(0, NA) +
theme_minimal()
}
for (i in variables){
assign(paste0(i, "_distribution"), distribution(i))
}
# Plot all distributions together
all_distributions = age_distribution + weight_distribution + IQ_distribution + household_income_distribution + pain_distribution + pain_cat_distribution + stai_distribution + mindfulness_distribution + cortisol_serum_distribution + cortisol_saliva_distribution + plot_layout(ncol = 3, axis_titles = "collect_y")
all_distributions
distribution = function(variables){
var = sym(variables)
data_a_clean |>
ggplot(aes(x = !!var)) +
geom_histogram() +
#xlim(0, NA) +
#ylim(0, NA) +
theme_minimal()
}
for (i in variables){
assign(paste0(i, "_distribution"), distribution(i))
}
# Plot all distributions together
all_distributions = age_distribution + weight_distribution + IQ_distribution + household_income_distribution + pain_distribution + pain_cat_distribution + stai_distribution + mindfulness_distribution + cortisol_serum_distribution + cortisol_saliva_distribution + plot_layout(ncol = 3, axis_titles = "collect_y")
all_distributions
levels(data_a_clean$sex)
View(data_a_clean)
data_a_clean = data_a |>
rename(stai = STAI_trait) |>
mutate(ID = as.integer(str_remove(ID, "ID_")),
hospital = as.factor(str_remove(hospital, "hospital_")),
sex = as.factor(str_to_lower(sex)))
is.integer(data_a_clean$ID)
is.factor(data_a_clean$hospital)
levels(data_a_clean$sex)
# Show summary statistics
View(summary_stats)
summary_stats <- data.frame()
for (s in variables) {
scores <- data_a_clean[[s]]
min_val <- min(scores, na.rm = TRUE)
max_val <- max(scores, na.rm = TRUE)
mean_val <- mean(scores, na.rm = TRUE)
median_val = median(scores, na.rm = TRUE)
sd_val <- sd(scores, na.rm = TRUE)
se_val <- sd_val / sqrt(sum(!is.na(scores)))
shapiro <- tryCatch({
shapiro.test(scores)$p.value
}, error = function(e) NA)
normal = ifelse(shapiro < 0.05, FALSE, TRUE)
summary_stats <- rbind(summary_stats, data.frame(
variables = s,
min = min_val,
max = max_val,
mean = mean_val,
median = median_val,
sd = sd_val,
se = se_val,
shapiro = shapiro,
normal = normal
))
}
# Show summary statistics
View(summary_stats)
data_a_clean = data_a_clean |>
mutate(household = if_else(household > 0, NA, household))
data_a_clean = data_a_clean |>
mutate(household = if_else(household > 0, NA_real_, household))
data_a_clean = data_a_clean |>
mutate(household_income = case_when(
household_income < 0 ~ NA_real_,
TRUE ~ household_income
))
data_a_clean = data_a_clean |>
mutate(household_income = if_else(
household_income < 0, NA_real_, household_income))
data_a_clean = data_a |>
rename(stai = STAI_trait) |>
mutate(ID = as.integer(str_remove(ID, "ID_")),
hospital = as.factor(str_remove(hospital, "hospital_")),
sex = as.factor(str_to_lower(sex)))
View(data_a_clean)
data_a_clean = data_a_clean |>
mutate(household_income = if_else(
household_income < 0, NA_real_, household_income))
data_a_clean |>
filter(IQ < 70)
data_a_clean |>
mutate(IQ_low  = if_else(IQ < 70, TRUE, FALSE))
data_a_clean |>
mutate(IQ_low  = if_else(IQ < 70, TRUE, FALSE)) |>
ggplot(aes(group = IQ_low)) +
geom_bar(aes(x = pain_cat))
data_a_clean |>
mutate(IQ_low  = if_else(IQ < 70, TRUE, FALSE)) |>
ggplot(aes(color = IQ_low)) +
geom_bar(aes(x = pain_cat))
data_a_clean |>
mutate(IQ_low  = if_else(IQ < 70, TRUE, FALSE)) |>
ggplot(aes(color = IQ_low)) +
geom_bar(aes(x = pain_cat)) +
geom_bar(aes(x = stai)) +
geom_bar(aes(x = pain))
data_a_clean |>
mutate(IQ_low  = if_else(IQ < 70, TRUE, FALSE)) |>
ggplot(aes(fill = IQ_low)) +
geom_bar(aes(x = pain_cat)) +
geom_bar(aes(x = stai)) +
geom_bar(aes(x = pain))
data_a_clean |>
mutate(IQ_low  = if_else(IQ < 70, TRUE, FALSE)) |>
ggplot(aes(fill = IQ_low)) +
geom_bar(aes(x = pain_cat), position = "dodge") +
geom_bar(aes(x = stai), position = "dodge") +
geom_bar(aes(x = pain), position = "dodge")
data_a_clean |>
mutate(IQ_low  = if_else(IQ < 70, TRUE, FALSE)) |>
pivot_longer(cols = c(pain_cat, stai, pain), names_to = "variable", values_to = "value") |>
ggplot(aes(x = value, fill = IQ_low)) +
geom_bar() +
facet_wrap(~ variable, scales = "free_x")
View(summary_stats)
fit a linear mixed model to estimate postoperative pain on datafile A. You should use the same fixed effect predictors as you used in your final model in the 3 assignment. (If you did not do that assignment, use the following predictors: age, sex, STAI, pain catastrophizing, mindfulness, and serum cortisol.) Importantly, the model has to account for the clustering of the data in different hospital sites. We have no reason to assume that the effects of the different predictors would be different in the different hospitals, so fit a random intercept model including the random intercept of hospital-ID. Once the model is built, note the model coefficients and the confidence intervals of the coefficients for all fixed effect predictors, and compare them to the ones obtained in the 3 assignment.
library(lme4)
if(!require(lme4), install.packages("lme4"))
if(!require("lme4")) install.packages("lme4")
library(lme4)
View(summary_stats)
model_1 = lmer(pain ~ pain_cat + stai + mindfulness + cortisol_serum + age + sex, data = data_a_clean)
View(summary_stats)
View(data_a_clean)
model_1 = lmer(pain ~ pain_cat + stai + mindfulness + cortisol_serum + age + sex + (1|hospital), data = data_a_clean)
summary(model_1)
if(!require("tidyverse")) install.packages("tidyverse")
here::here("data")
if(!require("tidyverse")) install.packages("tidyverse")
if(!require("here")) install.packages("here")
if(!require("haven")) install.packages("haven")
if(!require("patchwork")) install.packages("patchwork")
if(!require("lme4")) install.packages("lme4")
if(!require("lme4")) install.packages("lme4")
library(tidyverse)
library(here)
library(haven)
library(patchwork)
library(lme4)
library(lme4)
here::here("data")
setwd(here("C:/University/ELTE/PhD/Okulás/1st semester/Statisztikai programozás/elte-ppk-r-course-Fall-2025"))
getwd()
data_a <- read_sav("data/assignment_4_dataset_A.sav")
data_b <- read_sav("data/assignment_4_dataset_B.sav")
here::here("data")
if(!require("lmerTest")) install.packages("lmerTest")
library(lmerTest)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Chunk 2
if(!require("tidyverse")) install.packages("tidyverse")
if(!require("here")) install.packages("here")
if(!require("haven")) install.packages("haven")
if(!require("patchwork")) install.packages("patchwork")
if(!require("lme4")) install.packages("lme4")
if(!require("lmerTest")) install.packages("lmerTest")
library(tidyverse)
library(here)
library(haven)
library(patchwork)
library(lme4)
library(lmerTest)
here::here("data")
#setwd(here("C:/University/ELTE/PhD/Okulás/1st semester/Statisztikai programozás/elte-ppk-r-course-Fall-2025"))
#getwd()
data_a <- read_sav("data/assignment_4_dataset_A.sav")
data_b <- read_sav("data/assignment_4_dataset_B.sav")
# Chunk 3
variables = c("pain", "age", "weight", "stai", "pain_cat", "mindfulness", "cortisol_serum", "cortisol_saliva", "IQ", "household_income")
# Distribution of each variable
distribution = function(variables){
var = sym(variables)
data_a |>
ggplot(aes(x = !!var)) +
geom_histogram() +
#xlim(0, NA) +
#ylim(0, NA) +
theme_minimal()
}
for (i in variables){
assign(paste0(i, "_distribution"), distribution(i))
}
# Plot all distributions together
all_distributions = age_distribution + weight_distribution + IQ_distribution + household_income_distribution + pain_distribution + pain_cat_distribution + stai_distribution + mindfulness_distribution + cortisol_serum_distribution + cortisol_saliva_distribution + plot_layout(ncol = 3, axis_titles = "collect_y")
# Save plot
ggsave("all_distributions.png")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Chunk 2
if(!require("tidyverse")) install.packages("tidyverse")
if(!require("here")) install.packages("here")
if(!require("haven")) install.packages("haven")
if(!require("patchwork")) install.packages("patchwork")
if(!require("lme4")) install.packages("lme4")
if(!require("lmerTest")) install.packages("lmerTest")
library(tidyverse)
library(here)
library(haven)
library(patchwork)
library(lme4)
library(lmerTest)
here::here("data")
#setwd(here("C:/University/ELTE/PhD/Okulás/1st semester/Statisztikai programozás/elte-ppk-r-course-Fall-2025"))
#getwd()
data_a <- read_sav("data/assignment_4_dataset_A.sav")
data_b <- read_sav("data/assignment_4_dataset_B.sav")
# Chunk 3
variables = c("pain", "age", "weight", "STAI_trait", "pain_cat", "mindfulness", "cortisol_serum", "cortisol_saliva", "IQ", "household_income")
# Distribution of each variable
distribution = function(variables){
var = sym(variables)
data_a |>
ggplot(aes(x = !!var)) +
geom_histogram() +
#xlim(0, NA) +
#ylim(0, NA) +
theme_minimal()
}
for (i in variables){
assign(paste0(i, "_distribution"), distribution(i))
}
# Plot all distributions together
all_distributions = age_distribution + weight_distribution + IQ_distribution + household_income_distribution + pain_distribution + pain_cat_distribution + STAI_trait_distribution + mindfulness_distribution + cortisol_serum_distribution + cortisol_saliva_distribution + plot_layout(ncol = 3, axis_titles = "collect_y")
# Save plot
ggsave("all_distributions.png")
# Distributions seem fine
# Summary statistics of each variable
summary_stats <- data.frame()
for (s in variables) {
scores <- data_a[[s]]
min_val <- min(scores, na.rm = TRUE)
max_val <- max(scores, na.rm = TRUE)
mean_val <- mean(scores, na.rm = TRUE)
median_val = median(scores, na.rm = TRUE)
sd_val <- sd(scores, na.rm = TRUE)
se_val <- sd_val / sqrt(sum(!is.na(scores)))
shapiro <- tryCatch({
shapiro.test(scores)$p.value
}, error = function(e) NA)
normal = ifelse(shapiro < 0.05, FALSE, TRUE)
summary_stats <- rbind(summary_stats, data.frame(
variables = s,
min = min_val,
max = max_val,
mean = mean_val,
median = median_val,
sd = sd_val,
se = se_val,
shapiro = shapiro,
normal = normal
))
}
# Show summary statistics
View(summary_stats)
# Chunk 4
# ID, sex, and hospital are character vectors instead of factor
data_a_clean = data_a |>
rename(stai = STAI_trait) |>
mutate(ID = as.integer(str_remove(ID, "ID_")),
hospital = as.factor(str_remove(hospital, "hospital_")),
sex = as.factor(str_to_lower(sex)))
is.integer(data_a_clean$ID)
is.factor(data_a_clean$hospital)
levels(data_a_clean$sex)
# Household income has negative values
data_a_clean = data_a_clean |>
mutate(household_income = if_else(
household_income < 0, NA_real_, household_income))
# Investigate if low IQ participant(s) understood STAI, pain_cat, and mindfulness questionnaires by comparing them to other respondents
data_a_clean |>
mutate(IQ_low  = if_else(IQ < 70, TRUE, FALSE)) |>
pivot_longer(cols = c(pain_cat, stai, pain), names_to = "variable", values_to = "value") |>
ggplot(aes(x = value, fill = IQ_low)) +
geom_bar() +
facet_wrap(~ variable, scales = "free_x")
# Participants with below 70 IQ do not show meaningful differences in interpretable questions, they stay for analysis
# Chunk 5
#fit a linear mixed model to estimate postoperative pain on datafile A.
#use the following predictors: age, sex, STAI, pain catastrophizing, mindfulness, and serum cortisol
#model has to account for the clustering of the data in different hospital sites.
#fit a random intercept model including the random intercept of hospital-ID.
#note the model coefficients and the confidence intervals of the coefficients for all fixed effect predictors, and compare them to the ones obtained in the 3 assignment.
#compute the variance explained by the fixed effect predictors using marginal R^2^, and the variance explained by the fixed and random effect terms combined using conditional R^2^.
model_1 = lmer(pain ~ pain_cat + stai + mindfulness + cortisol_serum + age + sex + (1|hospital), data = data_a_clean)
summary(model_1)
dotplot(ranef(model_1, condVar = T))
plot(ranef(model_1, condVar = T))
coef(model_1)
summary(model_1)
glance(model_1)
confint(model_1)
summary(model_1)
library(performance)
install.packages("performance")
library(performance)
r2_nakagawa(model_1)
