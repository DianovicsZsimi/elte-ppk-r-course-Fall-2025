geom_histogram() +
#xlim(0, NA) +
#ylim(0, NA) +
theme_minimal()
}
for (i in variables){
assign(paste0(i, "_distribution"), distribution(i))
}
# Plot all distributions together
all_distributions = age_distribution + weight_distribution + IQ_distribution + household_income_distribution + pain_distribution + pain_cat_distribution + STAI_trait_distribution + mindfulness_distribution + cortisol_serum_distribution + cortisol_saliva_distribution + plot_layout(ncol = 3, axis_titles = "collect_y")
# Save plot
ggsave(here("plots", "all_distributions.png"))
# Distributions seem fine
# Summary statistics of each variable
summary_stats <- data.frame()
for (s in variables) {
scores <- data_a[[s]]
min_val <- min(scores, na.rm = TRUE)
max_val <- max(scores, na.rm = TRUE)
mean_val <- mean(scores, na.rm = TRUE)
median_val = median(scores, na.rm = TRUE)
sd_val <- sd(scores, na.rm = TRUE)
se_val <- sd_val / sqrt(sum(!is.na(scores)))
shapiro <- tryCatch({
shapiro.test(scores)$p.value
}, error = function(e) NA)
normal = ifelse(shapiro < 0.05, FALSE, TRUE)
summary_stats <- rbind(summary_stats, data.frame(
variables = s,
min = min_val,
max = max_val,
mean = mean_val,
median = median_val,
sd = sd_val,
se = se_val,
shapiro = shapiro,
normal = normal
))
}
# Show summary statistics
View(summary_stats)
# Chunk 4
# ID, sex, and hospital are character vectors instead of factor
data_a_clean = data_a |>
rename(stai = STAI_trait) |>
mutate(ID = as.integer(str_remove(ID, "ID_")),
hospital = as.factor(str_remove(hospital, "hospital_")),
sex = as.factor(str_to_lower(sex)))
is.integer(data_a_clean$ID)
is.factor(data_a_clean$hospital)
levels(data_a_clean$sex)
# Household income has negative values
data_a_clean = data_a_clean |>
mutate(household_income = if_else(
household_income < 0, NA_real_, household_income))
# Investigate if low IQ participant(s) understood STAI, pain_cat, and mindfulness questionnaires by comparing them to other respondents
data_a_clean |>
mutate(IQ_low  = if_else(IQ < 70, TRUE, FALSE)) |>
pivot_longer(cols = c(pain_cat, stai, pain), names_to = "variable", values_to = "value") |>
ggplot(aes(x = value, fill = IQ_low)) +
geom_bar() +
facet_wrap(~ variable, scales = "free_x")
# Participants with below 70 IQ do not show meaningful differences in interpretable questions, they stay for analysis
# Chunk 5
model_a = lmer(pain ~ pain_cat + stai + mindfulness + cortisol_serum + age + sex + (1|hospital), data = data_a_clean)
summary(model_a)
coef(model_a)
confint(model_a)
r2_nakagawa(model_a)
model_coefficients = sjPlot::plot_model(model_a,
show.values = TRUE, value.size = 3, value.offset = 0.3, vline.color = "black")
ggsave(here("plots", "model_coefficients.png"))
# Checking assumptions
check_model(model_a, verbose = TRUE)
### Seems that no assumptions have been violated, still, I will investigate the normality and homogeneity of variance assumptions further
## Constant variance
plot(model_a)
check_heteroscedasticity(model_a)
## Normality
qqnorm(resid(model_a))
qqline(resid(model_a))
qqnorm(ranef(model_a)$hospital[[1]])
qqline(ranef(model_a)$hospital[[1]])
# Compare with assignment 3 from previous year
model_results_new <- tidy(model_a, conf.int = TRUE)
model_results_new
model_results_new <- tidy(model_a, conf.int = TRUE)
if(!require("broom.mixed")) install.packages("broom.mixed")
library(broom.mixed)
model_results_new <- tidy(model_a, conf.int = TRUE)
model_results_new
write.csv(here("assignment_4_materials"), model_results_new, "model_results.csv")
write.csv(here("assignment_4_materials", model_results_new, "model_results.csv"))
write.csv(here("assignment_4_materials", model_results_new, "model_results.csv"))
write.csv(here("assignment_4_materials", model_results_new), "model_results.csv")
write.csv(here("assignment_4_materials", model_results_new), "model_results.csv")
write.csv(here("assignment_4_materials", model_results_new), "assignment_4_materials/model_results.csv")
write.csv(
model_results_new,
here("assignment_4_materials", "model_results.csv"),
row.names = FALSE
)
model_results_new
model_results_old
model_results_old = read_csv("https://raw.githubusercontent.com/DianovicsZsimi/elte-ppk-r-course-r_data_analysis-23_24_1/refs/heads/main/tab.csv", col_names = TRUE)
model_results_old
combined = bind_rows(model_results_new, model_results_old)
View(combined)
comparison <- full_join(
model_results_old %>% rename_with(~ paste0(.x, "_m1"), -term),
model_results_new %>% rename_with(~ paste0(.x, "_m2"), -term),
by = c("term" = "term")
)
View(comparison)
model_results_old
model_results_new
model_results_old_comparison = model_results_old |>
select(estimate, p.value, conf.low, conf.high)
model_results_new_comparison = model_results_old |>
select(estimate, p.value, conf.low, conf.high)
model_results_new_comparison = model_results_old |>
select(estimate, p.value, conf.low, conf.high) |>
filter(effect == "fixed")
model_results_new_comparison = model_results_old |>
filter(effect == "fixed") |>
select(estimate, p.value, conf.low, conf.high)
model_results_new_comparison
model_results_new_comparison = model_results_old |>
filter(effect == "fixed")
model_results_old
model_results_new_comparison = model_results_new |>
filter(effect == "fixed") |>
select(estimate, p.value, conf.low, conf.high)
model_results_new_comparison
model_results_old_comparison
model_results_new_comparison
model_results_old
model_results_old_comparison = model_results_old |>
select(term, estimate, p.value, conf.low, conf.high)
model_results_new_comparison = model_results_new |>
filter(effect == "fixed") |>
select(term, estimate, p.value, conf.low, conf.high)
model_results_old_comparison
model_results_new_comparison
old <- model_results_old_comparison |>
mutate(model = "Old")
new <- model_results_new_comparison |>
mutate(model = "New")
combined <- bind_rows(old, new)
ggplot(combined, aes(x = estimate, y = term, color = model)) +
geom_point(position = position_dodge(width = 0.6), size = 3) +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high),
position = position_dodge(width = 0.6), height = 0.2) +
geom_text(aes(label = round(estimate, 2)),
position = position_dodge(width = 0.6),
hjust = -0.5, size = 3.5, show.legend = FALSE) +
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
theme_minimal(base_size = 14) +
labs(
x = "Estimate (with 95% CI)",
y = "Term",
color = "Model"
)
model_results_old_comparison = model_results_old |>
select(term, estimate, p.value, conf.low, conf.high) |>
mutate(model = "Old")
model_results_new_comparison = model_results_new |>
filter(effect == "fixed") |>
select(term, estimate, p.value, conf.low, conf.high) |>
mutate(model = "New")
combined <- bind_rows(model_results_old_comparison, model_results_new_comparison)
model_results_old_comparison
model_results_old_comparison = model_results_old |>
select(term, estimate, p.value, conf.low, conf.high) |>
mutate(model = "Old",
term = recode(term, "STAI_trait" = "stai"))
model_results_old_comparison
model_results_old_comparison = model_results_old |>
select(term, estimate, p.value, conf.low, conf.high) |>
mutate(model = "Old",
term = recode(term, "STAI_trait" = "stai"),
term = recode(term, "cortisol_saliva" = "cortisol"))
model_results_new_comparison = model_results_new |>
filter(effect == "fixed") |>
select(term, estimate, p.value, conf.low, conf.high) |>
mutate(model = "New",
term = recode(term, "cortisol_serum" = "cortisol"))
combined <- bind_rows(model_results_old_comparison, model_results_new_comparison)
ggplot(combined, aes(x = estimate, y = term, color = model)) +
geom_point(position = position_dodge(width = 0.6), size = 3) +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high),
position = position_dodge(width = 0.6), height = 0.2) +
geom_text(aes(label = round(estimate, 2)),
position = position_dodge(width = 0.6),
hjust = -0.5, size = 3.5, show.legend = FALSE) +
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
theme_minimal(base_size = 14) +
labs(
x = "Estimate (with 95% CI)",
y = "Term",
color = "Model"
)
ggplot(combined, aes(x = estimate, y = term, color = model)) +
geom_point(position = position_dodge(width = 0.6), size = 3) +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high),
position = position_dodge(width = 0.6), height = 0.2) +
geom_text(aes(label = round(estimate, 2)),
position = position_dodge(width = 0.6),
hjust = -0.5, size = 3.5, show.legend = FALSE) +
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
theme_minimal(base_size = 14) +
labs(
title = "Model comparison",
x = "Estimate (with 95% CI)",
y = "Term",
color = "Model"
)
ggplot(combined, aes(x = estimate, y = term, color = model)) +
geom_point(position = position_dodge(width = 0.6), size = 3) +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high),
position = position_dodge(width = 0.6), height = 0.2) +
geom_text(aes(label = round(estimate, 2)),
position = position_dodge(width = 1.6),
hjust = -0.5, size = 3.5, show.legend = FALSE) +
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
theme_minimal(base_size = 14) +
labs(
title = "Model comparison",
x = "Estimate (with 95% CI)",
y = "Term",
color = "Model"
)
ggplot(combined, aes(x = estimate, y = term, color = model)) +
geom_point(position = position_dodge(width = 0.6), size = 3) +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high),
position = position_dodge(width = 0.6), height = 0.2) +
geom_text(aes(label = round(estimate, 2)),
position = position_dodge(width = 1),
hjust = -0.5, size = 3.5, show.legend = FALSE) +
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
theme_minimal(base_size = 14) +
labs(
title = "Model comparison",
x = "Estimate (with 95% CI)",
y = "Term",
color = "Model"
)
ggplot(combined, aes(x = estimate, y = term, color = model)) +
geom_point(position = position_dodge(width = 0.6), size = 3) +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high),
position = position_dodge(width = 0.6), height = 0.2) +
geom_text(aes(label = round(estimate, 2)),
position = position_dodge(width = 1),
hjust = 0.5, size = 3.5, show.legend = FALSE) +
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
theme_minimal(base_size = 14) +
labs(
title = "Model comparison",
x = "Estimate (with 95% CI)",
y = "Term",
color = "Model"
)
ggplot(combined, aes(x = estimate, y = term, color = model)) +
geom_point(position = position_dodge(width = 0.6), size = 3) +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high),
position = position_dodge(width = 0.6), height = 0.2) +
geom_text(aes(label = round(estimate, 2)),
position = position_dodge(width = 1),
hjust = 0, size = 3.5, show.legend = FALSE) +
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
theme_minimal(base_size = 14) +
labs(
title = "Model comparison",
x = "Estimate (with 95% CI)",
y = "Term",
color = "Model"
)
ggplot(combined, aes(x = estimate, y = term, color = model)) +
geom_point(position = position_dodge(width = 0.6), size = 3) +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high),
position = position_dodge(width = 0.6), height = 0.2) +
geom_text(aes(label = round(estimate, 2)),
position = position_dodge(width = 1),
hjust = 0.5, size = 3.5, show.legend = FALSE) +
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
theme_minimal(base_size = 14) +
labs(
title = "Model comparison",
x = "Estimate (with 95% CI)",
y = "Term",
color = "Model"
)
ggplot(combined, aes(x = estimate, y = term, color = model)) +
geom_point(position = position_dodge(width = 0.6), size = 3) +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high),
position = position_dodge(width = 0.6), height = 0.2) +
geom_text(aes(label = round(estimate, 2)),
position = position_dodge(width = 1),
hjust = -0.2, size = 3.5, show.legend = FALSE) +
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
theme_minimal(base_size = 14) +
labs(
title = "Model comparison",
x = "Estimate (with 95% CI)",
y = "Term",
color = "Model"
)
ggplot(combined, aes(x = estimate, y = term, color = model)) +
geom_point(position = position_dodge(width = 0.6), size = 3) +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high),
position = position_dodge(width = 0.6), height = 0.2) +
geom_text(aes(label = round(estimate, 2)),
position = position_dodge(width = 1),
hjust = -0.2, size = 3.5, show.legend = FALSE,
vjust = 0.2) +
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
theme_minimal(base_size = 14) +
labs(
title = "Model comparison",
x = "Estimate (with 95% CI)",
y = "Term",
color = "Model"
)
ggplot(combined, aes(x = estimate, y = term, color = model)) +
geom_point(position = position_dodge(width = 0.6), size = 3) +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high),
position = position_dodge(width = 0.6), height = 0.2) +
geom_text(aes(label = round(estimate, 2)),
position = position_dodge(width = 1),
hjust = -0.2, size = 3.5, show.legend = FALSE,
vjust = -0.2) +
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
theme_minimal(base_size = 14) +
labs(
title = "Model comparison",
x = "Estimate (with 95% CI)",
y = "Term",
color = "Model"
)
ggplot(combined, aes(x = estimate, y = term, color = model)) +
geom_point(position = position_dodge(width = 0.6), size = 3) +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high),
position = position_dodge(width = 0.6), height = 0.2) +
geom_text(aes(label = round(estimate, 2)),
position = position_dodge(width = 1),
hjust = -0.2, size = 3.5, show.legend = FALSE,
vjust = -0.7) +
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
theme_minimal(base_size = 14) +
labs(
title = "Model comparison",
x = "Estimate (with 95% CI)",
y = "Term",
color = "Model"
)
ggplot(combined, aes(x = estimate, y = term, color = model)) +
geom_point(position = position_dodge(width = 0.6), size = 3) +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high),
position = position_dodge(width = 0.6), height = 0.2) +
geom_text(aes(label = round(estimate, 2)),
position = position_dodge(width = 1),
hjust = -0.2, size = 3.5, show.legend = FALSE,
vjust = -2) +
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
theme_minimal(base_size = 14) +
labs(
title = "Model comparison",
x = "Estimate (with 95% CI)",
y = "Term",
color = "Model"
)
ggplot(combined, aes(x = estimate, y = term, color = model)) +
geom_point(position = position_dodge(width = 0.6), size = 3) +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high),
position = position_dodge(width = 0.6), height = 0.2) +
geom_text(aes(label = round(estimate, 2)),
position = position_dodge(width = 1),
hjust = -0.2, size = 3.5, show.legend = FALSE,
vjust = -1.5) +
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
theme_minimal(base_size = 14) +
labs(
title = "Model comparison",
x = "Estimate (with 95% CI)",
y = "Term",
color = "Model"
)
ggplot(combined, aes(x = estimate, y = term, color = model)) +
geom_point(position = position_dodge(width = 0.6), size = 3) +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high),
position = position_dodge(width = 0.6), height = 0.2) +
geom_text(aes(label = round(estimate, 2)),
position = position_dodge(width = 1),
hjust = 0, size = 3.5, show.legend = FALSE,
vjust = -1.5) +
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
theme_minimal(base_size = 14) +
labs(
title = "Model comparison",
x = "Estimate (with 95% CI)",
y = "Term",
color = "Model"
)
ggplot(combined, aes(x = estimate, y = term, color = model)) +
geom_point(position = position_dodge(width = 0.6), size = 3) +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high),
position = position_dodge(width = 0.6), height = 0.2) +
geom_text(aes(label = round(estimate, 2)),
position = position_dodge(width = 1),
hjust = 0, size = 3.5, show.legend = FALSE,
vjust = -1.7) +
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
theme_minimal(base_size = 14) +
labs(
title = "Model comparison",
x = "Estimate (with 95% CI)",
y = "Term",
color = "Model"
)
ggplot(combined, aes(x = estimate, y = term, color = model)) +
#geom_point(position = position_dodge(width = 0.6), size = 3) +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high),
position = position_dodge(width = 0.6), height = 0.2) +
geom_text(aes(label = round(estimate, 2)),
position = position_dodge(width = 1),
hjust = 0, size = 3.5, show.legend = FALSE,
vjust = -1.7) +
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
theme_minimal(base_size = 14) +
labs(
title = "Model comparison",
x = "Estimate (with 95% CI)",
y = "Term",
color = "Model"
)
ggplot(combined, aes(x = estimate, y = term, color = model)) +
geom_point(, size = 3) +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high),
position = position_dodge(width = 0.6), height = 0.2) +
geom_text(aes(label = round(estimate, 2)),
position = position_dodge(width = 1),
hjust = 0, size = 3.5, show.legend = FALSE,
vjust = -1.7) +
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
theme_minimal(base_size = 14) +
labs(
title = "Model comparison",
x = "Estimate (with 95% CI)",
y = "Term",
color = "Model"
)
ggplot(combined, aes(x = estimate, y = term, color = model)) +
geom_point(position = position_dodge(width = 0.6), size = 3) +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high),
position = position_dodge(width = 0.6), height = 0.2) +
geom_text(aes(label = round(estimate, 2)),
position = position_dodge(width = 1),
hjust = 0, size = 3.5, show.legend = FALSE,
vjust = -1.7) +
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
theme_minimal(base_size = 14) +
labs(
title = "Model comparison",
x = "Estimate (with 95% CI)",
y = "Term",
color = "Model"
)
summary(model_a)
model_a = lmer(pain ~ pain_cat + stai + mindfulness + cortisol_serum + age + sex + (1|hospital), data = data_a_clean)
View(model_a)
preds <- predict(model_a, newdata = data_b, re.form = NA)
View(data_b)
data_b_clean = data_b |>
rename(stai = STAI_trait) |>
mutate(ID = as.integer(str_remove(ID, "ID_")),
hospital = as.factor(str_remove(hospital, "hospital_")),
sex = as.factor(str_to_lower(sex)))
preds <- predict(model_a, newdata = data_b_clean, re.form = NA)
preds <- predict(model_a, newdata = data_b_clean)
preds <- predict(model_a, newdata = data_b_clean, allow.new.levels = T)
library(Metrics)
install.packages("Metrics")
library(Metrics)
rmse(data_test$y, preds)
mae(data_b_clean$y, preds)
mae(data_b_clean$pain, preds)
rmse(data_b_clean$pain, preds)
residuals_b <- data_b_clean$pain - prediction_b
prediction_b <- predict(model_a, newdata = data_b_clean, allow.new.levels = T)
residuals_b <- data_b_clean$pain - prediction_b
# RSS
RSS <- sum(resid_B^2)
RSS <- sum(residuals_b^2)
# TSS
TSS <- sum((data_b_clean$pain - mean(data_b_clean$pain))^2)
# R² on data_B
R2_B <- 1 - (RSS/TSS)
R2_B
summary(model_a)
summary = summary(model_a)
View(summary)
coef(model_a)
confint(model_a)
r2_nakagawa(model_a)
str(summary(model_a))
install.packages("MuMIn")
library(MuMIn)
r.squaredGLMM(fit1.lme)
r.squaredGLMM(model_a)
r.squaredGLMM(model_a)
R2_B
tab_model(model_a)
